import { identity } from "lodash";
import React from "react";
import {
  AnyStateMachine,
  createMachine,
  DoneEvent,
  StateMachine,
} from "xstate";

import {
  buildActions,
  buildSelectors,
  buildView,
  buildXStateTreeMachine,
} from "./builders";
import { singleSlot } from "./slots";

type Context = {};
type Events = any;
type States =
  | { value: "loading"; context: Context }
  | { value: "rendering"; context: Context };

type Options<TContext> = {
  /**
   * Displayed while the promise is resolving, defaults to returning null
   */
  Loader?: React.ComponentType;
  /**
   * Allows you to specify an overriden context when the machine is invoked
   * Automatically supplies the machines default context so only requires a partial of overrides
   */
  withContext?: () => Partial<TContext>;
};
/**
 * @public
 * Wraps an xstate-tree returning Promise (generated by `import()` in an xstate-tree machine responsible for
 * booting up the machine upon resolution
 *
 * @param factory - the factory function that returns the promise that resolves to the machine
 * @param options - configure loading component and context to invoke machine with
 * @returns an xstate-tree machine that wraps the promise, invoking the resulting machine when it resolves
 */
export function lazy<TMachine extends AnyStateMachine>(
  factory: () => Promise<TMachine>,
  {
    Loader = () => null,
    withContext = () => ({}),
  }: Options<TMachine["context"]> = {}
): StateMachine<Context, any, Events, States, any, any, any> {
  const loadedMachineSlot = singleSlot("loadedMachine");
  const slots = [loadedMachineSlot];
  const machine = createMachine<Context, Events, States>({
    initial: "loading",
    states: {
      loading: {
        invoke: {
          src: () => factory,
          onDone: "rendering",
        },
      },
      rendering: {
        invoke: {
          id: loadedMachineSlot.getId(),
          src: (_ctx, e: DoneEvent) => {
            return e.data.withContext({ ...e.data.context, ...withContext() });
          },
        },
      },
    },
  });

  const selectors = buildSelectors(machine, identity);
  const actions = buildActions(machine, selectors, identity);
  const view = buildView(
    machine,
    selectors,
    actions,
    slots,
    ({ slots, inState }) => {
      if (inState("loading")) {
        return <Loader />;
      }

      return <slots.loadedMachine />;
    }
  );

  return buildXStateTreeMachine(machine, {
    actions,
    selectors,
    slots,
    view,
  });
}
