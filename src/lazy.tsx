import React from "react";
import { assign, setup, fromPromise, InputFrom } from "xstate";

import { createXStateTreeMachine } from "./builders";
import { singleSlot } from "./slots";
import { AnyXstateTreeMachine } from "./types";

type Options<TStateMachine extends AnyXstateTreeMachine> = {
  /**
   * Displayed while the promise is resolving, defaults to returning null
   */
  Loader?: React.ComponentType;
  /**
   * Allows you to specify an overriden context when the machine is invoked
   * Automatically supplies the machines default context so only requires a partial of overrides
   */
  input?: InputFrom<TStateMachine>;
};
/**
 * @public
 *
 * Wraps an xstate-tree returning Promise (generated by `import()` in an xstate-tree machine responsible for
 * booting up the machine upon resolution
 *
 * @param factory - the factory function that returns the promise that resolves to the machine
 * @param options - configure loading component and context to invoke machine with
 * @returns an xstate-tree machine that wraps the promise, invoking the resulting machine when it resolves
 */
export function lazy<TMachine extends AnyXstateTreeMachine>(
  factory: () => Promise<TMachine>,
  { Loader = () => null, input }: Options<TMachine> = {}
): AnyXstateTreeMachine {
  const loadedMachineSlot = singleSlot("loadedMachine");
  const slots = [loadedMachineSlot];
  const machine = setup({}).createMachine({
    initial: "loading",
    context: {},
    states: {
      loading: {
        invoke: {
          src: fromPromise(factory),
          onDone: {
            target: "rendering",
            actions: assign({
              loadedMachine: ({ spawn, event }) =>
                spawn<TMachine>(event.output, {
                  id: loadedMachineSlot.getId(),
                  input,
                }),
            }),
          },
        },
      },
      rendering: {},
    },
  });

  return createXStateTreeMachine(machine, {
    slots,
    selectors({ inState }) {
      return { loading: inState("loading") };
    },
    View({ selectors, slots }) {
      if (selectors.loading) {
        return <Loader />;
      }

      return <slots.loadedMachine />;
    },
  });
}
